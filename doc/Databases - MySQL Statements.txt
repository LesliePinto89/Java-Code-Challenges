Coursework Title: Training Centre Database

-- DROP all existing data 

DROP TRIGGER IF EXISTS grade_alter;
DROP TABLE IF EXISTS audit_list; 
DROP PROCEDURE IF EXISTS schedule_course; 
DROP VIEW IF EXISTS sessions_in_future;
DROP TABLE IF EXISTS take;
DROP TABLE IF EXISTS delegate;
DROP TABLE IF EXISTS session;
DROP TABLE IF EXISTS module;
DROP TABLE IF EXISTS course;

-- CREATE TABLE Statements

CREATE TABLE course (
code CHAR(3) NOT NULL,
name VARCHAR(30) NOT NULL,
credits TINYINT NOT NULL,
CONSTRAINT pri_course PRIMARY KEY (code),
CONSTRAINT uni_course UNIQUE (name), 
CONSTRAINT chk_course CHECK (credits IN (75,100))
);

CREATE TABLE module (
code CHAR(2) NOT NULL,
name VARCHAR(30) NOT NULL,
cost DECIMAL(8,2) DEFAULT 0.0 NOT NULL,
credits TINYINT NOT NULL,
course_code CHAR(3) NOT NULL,
CONSTRAINT chk_module
CHECK (credits IN (25,50)),
CONSTRAINT uni_module UNIQUE (name),
CONSTRAINT pri_module PRIMARY KEY (code),
CONSTRAINT for_module FOREIGN KEY (course_code) REFERENCES course (code) ON UPDATE CASCADE ON DELETE CASCADE);

CREATE TABLE session (
code CHAR(2) NOT NULL,
date DATE NOT NULL,
room VARCHAR(30) NULL,
CONSTRAINT pri_session PRIMARY KEY (code,date),
CONSTRAINT for_session FOREIGN KEY (code) REFERENCES module (code)ON UPDATE CASCADE ON DELETE CASCADE);

CREATE TABLE delegate (
no INT NOT NULL,
name VARCHAR(30) NOT NULL,
phone VARCHAR(30) NULL,
CONSTRAINT pri_delegate PRIMARY KEY (no)
);

CREATE TABLE take (
no INT NOT NULL,
code CHAR(2) NOT NULL,
grade TINYINT NULL,
CONSTRAINT pri_take PRIMARY KEY (no,code),
CONSTRAINT for_take_no FOREIGN KEY (no) REFERENCES delegate (no) ON UPDATE CASCADE ON DELETE CASCADE,
CONSTRAINT for_take_code FOREIGN KEY (code) REFERENCES module (code) ON UPDATE CASCADE ON DELETE CASCADE);

-- Add foreign keys indexes

CREATE INDEX index1_foreign_take ON take (no);
CREATE INDEX index2_foreign_take ON take (code);
CREATE INDEX index_foreign_module ON module (course_code);
CREATE INDEX index_foreign_session ON session (code);

-- CREATE future sessions VIEW statement

CREATE VIEW sessions_in_future AS SELECT code, date, room FROM session WHERE date > CURRENT_DATE() WITH CHECK OPTION;

-- Statement to test VIEW functionality

INSERT INTO sessions_in_future VALUES ('A2','2011.03.20',NULL);

-- Insert sample data into database tables

INSERT INTO delegate (no,name,phone) VALUES (2001,'Mike', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2002,'Andy', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2003,'Sarah', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2004,'Karen', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2005,'Lucy', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2006,'Steve', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2007,'Jenny', NULL);
INSERT INTO delegate (no,name,phone) VALUES (2008,'Tom', NULL);

INSERT INTO course (code,name,credits) VALUES ('WSD','Web Systems Development', 75);
INSERT INTO course (code,name,credits) VALUES ('DDM','Database Design & Management', 100);
INSERT INTO course (code,name,credits) VALUES ('NSF','Network Security & Forensics', 75);

INSERT INTO module (code,name,cost,credits,course_code) VALUES ('A2','ASP.NET', 250,25,'WSD');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('A3','PHP', 250,25,'WSD');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('A4','JavaFX', 350,25,'WSD');

INSERT INTO module (code,name,cost,credits,course_code) VALUES ('B2','Oracle', 750,50,'DDM');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('B3','SQLS', 750,50,'DDM');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('C2','Law', 250,25,'NSF');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('C3','Forensics', 350,25,'NSF');
INSERT INTO module (code,name,cost,credits,course_code) VALUES ('C4','Networks', 250,25,'NSF');

INSERT INTO session (code,date,room) VALUES ('A2','2017.06.05', 305);
INSERT INTO session (code,date,room) VALUES ('A3','2017.06.06', 307);
INSERT INTO session (code,date,room) VALUES ('A4','2017.06.07', 305);
INSERT INTO session (code,date,room) VALUES ('B2','2017.08.22', 208);
INSERT INTO session (code,date,room) VALUES ('B3','2017.08.23', 208);
INSERT INTO session (code,date,room) VALUES ('A2','2018.05.01', 303);
INSERT INTO session (code,date,room) VALUES ('A3','2018.05.02', 305);
INSERT INTO session (code,date,room) VALUES ('A4','2018.05.03', 303);
INSERT INTO session (code,date,room) VALUES ('B2','2018.07.10', NULL);
INSERT INTO session (code,date,room) VALUES ('B3','2018.07.11', NULL);

INSERT INTO take (no,code,grade) VALUES (2003,'A2', 68);
INSERT INTO take (no,code,grade) VALUES (2003,'A3', 72);
INSERT INTO take (no,code,grade) VALUES (2003,'A4', 53);
INSERT INTO take (no,code,grade) VALUES (2005,'A2', 48);
INSERT INTO take (no,code,grade) VALUES (2005,'A3', 52);
INSERT INTO take (no,code,grade) VALUES (2002,'A2', 20);
INSERT INTO take (no,code,grade) VALUES (2002,'A3', 30);
INSERT INTO take (no,code,grade) VALUES (2002,'A4', 50);
INSERT INTO take (no,code,grade) VALUES (2008,'B2', 90);
INSERT INTO take (no,code,grade) VALUES (2007,'B2', 73);
INSERT INTO take (no,code,grade) VALUES (2007,'B3', 63);

-- CREATE PROCEDURE Statements 

DELIMITER $$

CREATE PROCEDURE schedule_course (IN schedule_code CHAR(3), IN schedule_date DATE)
  BEGIN
	DECLARE complete BOOLEAN DEFAULT FALSE;
	
-- Temporary variable that stores cursor fetched data later in a loop loop
            
            DECLARE module_code CHAR(2); 
	 
-- The first parameter in the procedure called 'schedule_code' will be equal to the course_code variable from the module table, which is associated with the cursor through a SELECT statement.

            DECLARE module_c CURSOR FOR
            SELECT code FROM module WHERE course_code = schedule_code;
			DECLARE CONTINUE HANDLER FOR NOT FOUND
  	        SET complete = TRUE;
         
-- Code ensures schedule_date is at least a month in the future - a violation gives error response.

	IF (schedule_date < DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)) THEN
  	SIGNAL SQLSTATE '45000'
    	SET MESSAGE_TEXT = 'schedule_date is not a month in the future';
	END IF;

	OPEN module_c; 

 a_looper: LOOP
 FETCH module_c INTO module_code;

  	IF complete THEN
    	LEAVE a_looper;
  	END IF;


--  If current schedule_date value equals a weekend day, adjust schedule_date to below conditions. 
	
            IF WEEKDAY(schedule_date) = 5 THEN      #Equals Saturday
    	SET schedule_date = DATE_ADD(schedule_date, INTERVAL 2 DAY);
  	ELSEIF WEEKDAY(schedule_date) = 6 THEN       #Equals Sunday
    	SET schedule_date = DATE_ADD(schedule_date, INTERVAL 1 DAY);
  	END IF;
 
-- Either way, insert fetched values into session table, and update schedule_date to next day interval to make it add each day concurrently.
 
INSERT INTO session VALUES (module_code, schedule_date, NULL);
  	SET schedule_date = DATE_ADD(schedule_date, INTERVAL 1 DAY);
	END LOOP;

	CLOSE module_c;
  END$$

DELIMITER ;

-- CREATE TRIGGER Statements

CREATE TABLE audit_list ( 
  delegate_no INT NOT NULL,
  module_code CHAR(2) NOT NULL,
  grade_old TINYINT NULL,
  grade_new TINYINT NULL,
  audit_no INT NOT NULL AUTO_INCREMENT, 
  audit_by VARCHAR(30) NOT NULL,
  audit_on DATETIME NOT NULL,
  CONSTRAINT pri_audit PRIMARY KEY (audit_no));

DELIMITER &&

CREATE TRIGGER grade_alter

 -- After a user makes an update to a grade column entry in the take table, the following parameters are added to the audit_list table.
 
 AFTER UPDATE ON take FOR EACH ROW
	BEGIN
  	IF (OLD.grade <> NEW.grade) THEN
    	INSERT INTO audit_list
      	(delegate_no, module_code, grade_old, grade_new, audit_by, audit_on)
      	VALUES
        	(NEW.no, NEW.code, OLD.grade, NEW.grade, CURRENT_USER(), NOW());
  	END IF;
	END&&

DELIMITER ;

DML Query Statements in MySQL

-- Task 1

SELECT code, name, credits FROM module;

code	name		credits
A2	ASP.NET	25
A3	PHP	            25
A4	JavaFX	25
B2	Oracle	            50
B3	SQLS	            50
C2	Law	            25
C3	Forensics	25
C4	Networks	25

-- Task 2

SELECT no, name FROM delegate ORDER BY (name) DESC;

no	name
2008	Tom
2006	Steve
2003	Sarah
2001	Mike
2005	Lucy
2004	Karen
2007	Jenny
2002	Andy

-- Task 3

SELECT code, name, credits FROM course WHERE name LIKE '%Network%';

code	name					credits
NSF	Network Security & Forensics	75
-- Task 4

SELECT MAX(grade) AS 'highest' FROM take;

highest
90

-- Task 5

SELECT no FROM take WHERE grade = (SELECT MAX(grade) FROM take);

no
2008

-- Task 6

SELECT no, name  FROM delegate WHERE no = (SELECT no FROM take WHERE grade = (SELECT MAX(grade) FROM take));

no	name
2008	Tom

-- Task 7

SELECT code, date FROM session WHERE (date BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 1 YEAR) AND (room IS NULL));

code	date
B2	2018-07-10
B3	2018-07-11

-- Task 8

SELECT D.no, D.name, M.code, M.name FROM delegate D INNER JOIN take T
ON D.no = T.no INNER JOIN module M ON T.code = M.code WHERE T.grade < 40;

no	name	code	name
2002	Andy	A2	ASP.NET
2002	Andy	A3	PHP

-- Task 9

SELECT D.no, D.name FROM delegate D INNER JOIN take T ON D.no = T.no
WHERE T.grade = (SELECT MAX(grade) FROM take);
no	name
2008	Tom
 
-- Task 10

SELECT D.no, D.name, SUM(M.credits) AS 'attained', C.code, C.name, C.credits
FROM delegate D INNER JOIN take T ON D.no = T.no INNER JOIN module M
ON T.code = M.code INNER JOIN course C ON M.course_code = C.code
WHERE T.grade >= 40 GROUP BY D.no, D.name, C.code, C.name, C.credits;

no	name	   attained	code	name					credits
2002	Andy	   25		WSD	Web Systems Development		75
2003	Sarah	   75		WSD	Web Systems Development		75
2005	Lucy	   50		WSD	Web Systems Development		75
2007	Jenny	   100		DDM	Database Design & Management	100
2008	Tom	   50		DDM	Database Design & Management	100

-- Task 11

SELECT D.no, D.name, SUM(M.credits) AS 'attained', C.code, C.name, C.credits
FROM delegate D INNER JOIN take T ON D.no = T.no INNER JOIN module M
ON T.code = M.code INNER JOIN course C ON M.course_code = C.code
WHERE T.grade >= 40 GROUP BY D.no, D.name, C.code, C.name, C.credits
HAVING SUM(M.credits) = C.credits;

no  	name    attained    	code    name    				credits
2003    Sarah   75  		WSD 	Web Systems Development 		75
2007    Jenny   100 		DDM 	Database Design & Management      100
